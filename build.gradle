
buildscript {

    repositories {

        flatDir {
            dirs 'lib'
        }
        mavenLocal()
        maven {
                url "http://files.minecraftforge.net/maven"
                allowInsecureProtocol true
        }
        jcenter()
        mavenCentral()
    }
    apply plugin: 'java'

    dependencies {

        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.0'
    }
}
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'

}
apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle.forgedev.patcher'
apply plugin: 'java'

repositories {
    flatDir {
        dirs 'lib' // Укажите путь к папке с JAR-файлами
    }
}
dependencies {
    implementation name: 'lombok' 
    implementation name: 'via'
    implementation name: 'back' 
    implementation name: 'yml'
}

configurations {
    shade
    compile.extendsFrom shade
}

group = 'me.yourname'
version = '1.0.1'

ext {
    minecraft_version = '1.16.5'
    mcp_version = '20210115.111550'
    mappings_channel = 'snapshot'
    mappings_version = '20201028-1.16.3'
}

repositories {
    mavenCentral()

}

dependencies {
    shade 'net.minecraftforge:forgespi:3.0.+'
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    implementation 'org.json:json:20230618'
    implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.20'
    implementation 'org.java-websocket:Java-WebSocket:1.3.8'

}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.forgedev.mcp'
    mcp {
        config = minecraft_version + '-' + mcp_version
        pipeline = 'joined'
    }
}

evaluationDependsOn(':mcp')

patcher {
    parent = project(':mcp')
    patchedSrc = file('src/main/java')
    mappings channel: mappings_channel, version: mappings_version
    mcVersion = minecraft_version
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    from('src/main/resources') {
        include '**/*'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

}

task runclient(type: JavaExec) {
    group = "MCP"
    description = "Runs the clients"
    classpath sourceSets.main.runtimeClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread', '-Dfml.earlyprogresswindow=false'
    }
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', downloadAssets.output
    args '--assetIndex', "1.16"
    args '--accessToken', '0'
    main 'net.minecraft.client.main.Main'
    workingDir 'run'
}

task setup() {
    group = "MCP"
    description = "Setups the dev workspace"
    dependsOn ':extractMapped'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
task copyAssets {
    group = "MCP"
    description = "Download and place the assets into the run folder"
    dependsOn ':downloadAssets'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }

}
